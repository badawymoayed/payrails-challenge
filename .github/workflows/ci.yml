# .github/workflows/ci.yml

name: API Test Automation CI

# This workflow runs on any push to the 'main' branch
on:
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This single job will build, test, and prepare reports
  build_and_test:
    runs-on: ubuntu-latest
    
    # Securely use the API key from GitHub Secrets
    env:
      ALPHAVANTAGE_API_KEY: ${{ secrets.ALPHAVANTAGE_API_KEY }}

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Java and Maven environment
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'

      # Step 3: Run the tests using the testng.xml suite
      - name: Run Maven Tests
        run: mvn clean test

      # Step 4: Upload the ExtentReports HTML file as an artifact
      - name: Upload ExtentReports Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ExtentReports-Report
          path: target/test-output/ExtentReport.html

      # Step 5: Upload the Allure results directory as an artifact
      # CRITICAL FIX: The path is updated to look inside the 'target' directory.
      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Allure-Results
          path: target/allure-results
          retention-days: 5

  # This second job depends on the first one and will only run after it's complete.
  # Its purpose is to generate the Allure Report and deploy it.
  generate_allure_report:
    runs-on: ubuntu-latest
    needs: build_and_test

    # This grants permissions for the actions to deploy to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      # Step 1: Download the Allure results that the previous job uploaded
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: Allure-Results
          path: allure-results

      # Step 2: Generate the Allure Report using a more modern action
      - name: Generate Allure Report
        uses: allure-framework/allure-github-action@v1.6.1
        with:
          results_path: allure-results
          report_path: allure-report

      # Step 3: Upload the generated report as an artifact to be deployed
      - name: Upload Allure Report for Deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      # Step 4: Deploy the Allure Report to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4